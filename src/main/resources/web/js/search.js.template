// js file for live search data

// strings to ids
var stringsToIds = {};

// tag support and function to add tags safely
var tagMap = {}
function addTag(tag, schoolId, schoolUid) {
    if(tagMap[tag] == null) {
        tagMap[tag] = [];
    }
    tagMap[tag].push({type: 'school', id: schoolId, uid: schoolUid});
}

// data map
var divisions = {};

// data helper for divisions
function addDivision(id, name) {
    divisions[id] = { conferences: [], schools: [] };
    stringsToIds[name] = {type: 'div', id: id};
    stringsToIds[id] = {type: 'div', id: id};
}

// data helper for conferences
function addConference(divId, confId, confName) {
    divisions[divId].conferences.push(confId)
    divisions[divId][confId] = { schools: [] };
    stringsToIds[confName] = {type: 'conf', id: confId};
    stringsToIds[confId] = {type: 'conf', id: confId};
}

// data helper for schools
function addSchool(divId, confId, schoolId, schoolName, schoolUid) {
    divisions[divId].schools.push(schoolId);
    divisions[divId][confId].schools.push(schoolId);
    divisions[divId][confId][schoolId] = { id: schoolId, uid: schoolUid };
    stringsToIds[schoolName] = {type: 'school', id: schoolId, uid: schoolUid };
    stringsToIds[schoolUid] = {type: 'school', id: schoolId, uid: schoolUid };
}

// reusable function for clearing the search
function clearSearch() {
    $('.searchable, .swatch').unmark();
    $('.searchable').show();
    $('.school-tag').hide();
}

// hides everything not found
function search(searchString) {
    if(searchString == null || "" == searchString.trim()) {
        clearSearch();
        return;
    }

    // holding variables for different logic
    var divs = [];
    var confs = [];
    var schools = [];

    // with a simple text search identify all the items that match
    for (var value in stringsToIds) {
        if(value.includes(searchString.toLowerCase())) {
            var found = stringsToIds[value];
            if(found.type == 'div') {
                divs.push(found);
            } else if(found.type == 'conf') {
                confs.push(found);
            } else if(found.type == 'school' || found.type == 'tag') {
                schools.push(found);
            }
        }
    }

    // cheap hash set
    var show = {};

    // if a division is found, so is everything in it
    for(var div in divs) {
        show['.div-' + divs[div].id] = true;
    }
    // if a conference is found, do the same for the conference but also the division header
    for(var conf in confs) {
        show['.conf-' + confs[conf].id] = true;
        for (var div in divisions) {
            if(divisions[div][confs[conf].id] != null) {
                show['.div-header-' + div] = true;
                break;
            }
        }
    }

    // for each tag, if that tag is found, add the tags and schools to the visibility list
    for(var tag in tagMap) {
        // no result found, go to next tag
        if(!tag.includes(searchString)) {
            continue;
        }

        // otherwise results are found
        var tagSchoolList = tagMap[tag];
        for(index in tagSchoolList) {
            // make specific tag-school combo visible
            show['#tag-' + tagSchoolList[index].uid + '-' + tag] = true;
            // add entry to schools map to leverage school/division showing code
            schools.push({type: 'school', id: tagSchoolList[index].id, uid: tagSchoolList[index].uid});
        }
    }

    // if a school is found do the same for the school... that is to say show the division and conference header
    for(var school in schools) {
        show['.school-' + schools[school].uid] = true;
        for (var div in divisions) {
            for(var conf in divisions[div]) {
                if("schools" != conf && "conferences" != conf && divisions[div][conf] != null && divisions[div][conf][schools[school].id] != null) {
                    show['.div-header-' + div] = true;
                    show['.conf-header-' + conf] = true;
                    show['.conf-row-' + conf] = true;
                }
            }
        }
    }

    // convert to list
    var showList = [];
    for(var key in show) {
        showList.push(key);
    }

    // not found selector is the jquery compatible join
    var foundSelector = showList.join(', ');

    // do action to hide elements not found, starting by unmarking and then remarking
    $('.school-tag').hide();
    $('.searchable').unmark().mark(searchString).show().not(foundSelector).hide().unmark();
    $('.swatch').unmark();

    // debugging return useful data
    return {found: foundSelector, divisions: divs, conferences: confs, schools: schools, show: show};
}

// values
var timeout = 100;
var searchTimer = null;

// function to defer the search for <timeout>ms or so
// to prevent multiple searches and "flashing" while
// still appearing "live"
function doDeferredSearch() {
    // cancel timer
    if(searchTimer != null) {
        window.clearTimeout(searchTimer);
    }

    // load value from search box
    var value = $('#searchbox').val();

    // defer search
    searchTimer = window.setTimeout(function(){
        search(value);
    }, timeout);
}

// loaded data - search hashes and 'member of' data
<#list divisions.sortedDivisions as division>
addDivision('${division.id}','${division.name?lower_case}');
<#list division.conferences() as conference>
addConference('${division.id}', '${conference}', '${division.getConferenceName(conference)?lower_case}');
<#list division.schools(conference) as school>
addSchool('${division.id}','${conference}','${school.id}','${school.display()?lower_case}', '${school.uid}');
<#list school.tags as tag>
addTag('${tag}','${school.id}', '${school.uid}');
</#list>
</#list>
</#list>
</#list>

// after data is loaded bind to search box on load
$(document).ready(function(){
    $('#searchbox').change(doDeferredSearch);
    $('#searchbox').focusout(doDeferredSearch);
    $('#searchbox').keyup(doDeferredSearch);
});